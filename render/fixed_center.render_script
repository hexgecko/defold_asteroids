local fixed_center = require("render.fixed_center")

local LOGICAL_WIDTH = 1024
local LOGICAL_HEIGHT = 672

local CLEAR_COLOR = hash("clear_color")
local WINDOW_RESIZED = hash("window_resized")
local SET_VIEW_PROJECTION = hash("set_view_projection")

local FRAME_RESIZED = hash("frame_resized")
local SUBSCRIBE_FRAME_RESIZED = hash("subscribe_frame_resized")
local UNSUBSCRIBE_FRAME_RESIZED = hash("unsubscribe_frame_resized")

local function calc_screen_rect(width, height)
    -- calculate the acpect ratio
    local acpect_ratio = height / width
    local logic_width, logical_height

    -- calculate the logical width and height in comparation with the window
    if acpect_ratio > (LOGICAL_HEIGHT / LOGICAL_WIDTH) then
        logical_width  = LOGICAL_HEIGHT / acpect_ratio
        logical_height = LOGICAL_HEIGHT
    else
        logical_width  = LOGICAL_WIDTH
        logical_height = LOGICAL_WIDTH * acpect_ratio
    end
    
    local left = (LOGICAL_WIDTH - logical_width)/2
    local bottom = (LOGICAL_HEIGHT - logical_height)/2
    local right  = left + logical_width
    local top = bottom + logical_height

    return left, top, right, bottom
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    local left, top, right, bottom = calc_screen_rect(render.get_width(), render.get_height())
    self.projection = vmath.matrix4_orthographic(left, right, bottom, top, -1, 1)

    fixed_center.set_rect(left, top, right, bottom)
    fixed_center.calc_pick_matrix(self.projection, self.view, render.get_width(), render.get_height())

    self.frame_resized_subscriber = {}
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
    
    render.set_projection(self.projection)

    -- render sprites, tiles and particles
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    -- render GUI
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message, sender)
    if message_id == CLEAR_COLOR then
        self.clear_color = message.color
        
    elseif message_id == WINDOW_RESIZED then
        local left, top, right, bottom = calc_screen_rect(message.width, message.height)
        self.projection = vmath.matrix4_orthographic(left, right, bottom, top, -1, 1)
        fixed_center.set_rect(left, top, right, bottom)
        fixed_center.calc_pick_matrix(self.projection, self.view, render.get_width(), render.get_height())
        for url,_ in pairs(self.frame_resized_subscriber) do
            msg.post(url, FRAME_RESIZED, fixed_center.rect)
        end
        
    elseif message_id == SET_VIEW_PROJECTION then
        self.view = message.view
        self.projection = message.projection

    elseif message_id == SUBSCRIBE_FRAME_RESIZED then
        self.frame_resized_subscriber[sender] = true
        
    elseif message_id == UNSUBSCRIBE_FRAME_RESIZED then
        self.frame_resized_subscriber[sender] = nil
    end
end
