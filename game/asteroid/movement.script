go.property("angle", 30)
go.property("speed", 100)
go.property("rotation_speed", 180)

local TRACK_INTERVAL = 0.1
local CIRCLE_RADIUS = 28

function init(self)
	-- calculate the velocity vector for the asteroid
	local rq = vmath.quat_rotation_z(math.rad(-self.angle))
	local up = vmath.vector3(0, self.speed, 0)
	self.velocity = vmath.rotate(rq, up)

	-- get the bullet speed
	self.bullet_speed = go.get("ship/bullet#movement", "speed")

	-- get the position and velocity from the ship every TRACK_INTERVAL
	timer.delay(TRACK_INTERVAL, true, function()
		msg.post("ship/ship#movement", hash("get_position_velocity"))
	end)
end

function update(self, dt)
	local p = go.get_position()
	local r = go.get_rotation()
	go.set_position(p + self.velocity*dt)
	go.set_rotation(r * vmath.quat_rotation_z(math.rad(-self.rotation_speed * dt)))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position_velocity") then
		local a,u,r = unpack(message)
		u = u * self.bullet_speed
		local b,v = go.get(".", "position"), self.velocity
		local c = a - b
		local d = u.x*v.y - u.y*v.x
		local t = (c.y*u.x - c.x*u.y)/d
		local s = (c.y*v.x - c.x*v.y)/d
		if t > 0 and s > 0 then
			local ps = a + u*s
			local pa = b + v*s
			-- msg.post("@render:", "draw_line", { start_point=a, end_point=ps, color = vmath.vector4(1,0,0,1) } )
			-- msg.post("@render:", "draw_line", { start_point=b, end_point=pa, color = vmath.vector4(0,1,0,1) } )
			if (pa.x - ps.x)^2 + (pa.y - ps.y)^2 < CIRCLE_RADIUS^2 then
				msg.post("ship/bullet#movement", hash("fire"), {
					position = a,
					rotation = r
				})
			end
		end
	end
end
